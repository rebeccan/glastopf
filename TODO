IMPLEMENTATION TODOs
--------------------

- make docker server thread safe + faster

- configuration: user can choose between emulators sqli and sqlintectable

- cleaning databases cron job:
    - add timestamp of latest_activity to attacker
    - delete all dataxx.db for attackers whose latest_activity is longer than one week
    
- sqlalchemy sessions and concurrency?

- "connection_string_data" from configuration -> do something useful or delete
    
- map user injected values to useful queries to comments and users tables

- clean Docker stuff:
    delete/rebuild specific db inside VM

- Fix:
        - python -m unittest discover -s testing -p 'test_emulators.py'
            -->
            from __init__ import __version__
            ImportError: No module named __init__
        
        - Docker
            stop docker container throws error
            
        - rewrite tests according to modified implementation
        



IMPLEMENTATION IN PROGRESS
--------------------------

- use comments table instead of comments.txt for convincable SQL-injection delivered as a comment

- improve classification in requests.xml
    problem: SQLinjectableEmulator is only ran, when classified as sqlinjectable
    -> looks weired when an attacker tries to login normally
    "/comments", "?login=bla&password=bla

- session management
    * make sure cookie is not overriden or HTTP-response is unclean due to cascaded response creation
    * use session in SQLInjectableEmulator
    


IMPLEMENTATION DONEs
--------------------

- session management
    e.g. for remembering previous logins.
    * SessionEmulator
    * send HTTP-Cookie
    * load SimpleCookie from HTTP-request
    * cascade SessionEmulator prior other emulators

- make input fields of GUI injectable
    (seems to be a longer task, as the body seems to be ingored completely)

- Docker:
    find out how to open NEW terminal for dockercontainer stdout
    Workaraound: https://docs.docker.com/reference/commandline/cli/#logs
        "The docker logs --follow command will continue streaming the new output from the container's STDOUT and STDERR."

- embedd response from sqlinjectable handler in fancy website
    * smart use of dork generator and templates

- reduce dynamic dork page generation from 5 dork pages to 1 per time interval to improve sqlmap HTTP-response analyse

- implement MORE intelligent attacker fingerprinting, which is not only over HTTP headers (still stupid)
- check if ip-less attacker fingerprinting is really useful with browserless hacking (botnet, sqlmap)

- Fix timing problem: docker_setup needs initial database, which is not there before glastopfs first run. 
- Check chronological order of: data.db creation and docker_setup, which copies data.db
    does it exist if glastopf never ran before?

- implement intelligent attacker fingerprinting, which is not over ip address

- docker_server.py no access from outside! only host to container access.

- let injection only run in docker container
    * image & container
    * dockerfile
    * dockerclient & dockerserver
    * localclient
    * docker_setup stuff
        + copy needed python files only into docker container
    * error message if glastopf is started, before setup ran.

- clean Docker stuff:
    * renew whole VM
    * container and untagged images before docker_setup

- write test for SQLinjectableEmulator

- close connections in the end (e.g. attackerdb_session)

- add sqlite datasbase: attacker.db
    Mapping Attacker class to attacker table
    
- add sqlite database: data.db
    Mapping User class to user table
    
- add unique data databasename to each Attacker

- reuse mechanism of copy-data-db, accordingly to attacker

- 1 to 1 relation of copy-data-db and attacker-db

- take all connection strings from cfg file

- Integrate attacker-db logic in Glastopf request handler
    write SQLinjectableEmulator

- open db connections in beginning

- setup data.db, attacker.db if not present yet

_________________________________________________________________

TESTING DOs
-----------


TESTING DONEs
-------------

_________________________________________________________________