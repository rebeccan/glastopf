IMPLEMENTATION TODOs
--------------------

- rewrite tests according to modified implementation

- docker_server.py needs to be hardened, no access from outside! only host to container access.

- improve classification in requests.xml
    problem: SQLinjectableEmulator is only ran, when classified as sqlinjectable
    -> looks weired when an attacker tries to login normally
    "/comments", "?login=bla&password=bla
    
- embedd response from sqlinjectable handler in fancy website

- add intelligent identification columns to attacker database

- use comments table instead of comments.txt 

- make input fields of GUI injectable
    (seems to be a longer task, as the body seems to be ingored completely)

- configuration: user can choose emulators sqli and sqlintectable

- relation attacker to ip_profile, inurl, etc...

- cleaning databases cron job:
    - add timestamp of latest_activity to attacker
    - delete all dataxx.db for attackers whose latest_activity is longer than one week
    
- sqlalchemy sessions and concurrency?

- "connection_string_data" from configuration -> do something useful or delete

- Check chronological order of: data.db creation and docker_setup, which copies data.db
    does it exist if glastopf never ran before?
    
- map user injected values to useful queries to comments and users tables

- Fix:
        python -m unittest discover -s testing -p 'test_emulators.py'
        -->
        from __init__ import __version__
        ImportError: No module named __init__


IMPLEMENTATION IN PROGRESS
--------------------------


- let injection only run in docker container
    * image & container
    * dockerfile
    * dockerclient & dockerserver
    * localclient
    * docker_setup stuff
        + find out how to open NEW terminal for dockercontainer stdout
        + copy needed python files only in docker container
    * cleaning VMs or DBs
    * stop docker container throws error

- clean:
    * renew whole VM
    * specific db inside VM
    * specific db outside VM?
    * nontagged docker images
    * container and untagged images before docker_setup


IMPLEMENTATION DONEs
--------------------

- write test for SQLinjectableEmulator

- close connections in the end (e.g. attackerdb_session)

- add sqlite datasbase: attacker.db
    Mapping Attacker class to attacker table
    
- add sqlite database: data.db
    Mapping User class to user table
    
- add unique data databasename to each Attacker

- reuse mechanism of copy-data-db, accordingly to attacker

- 1 to 1 relation of copy-data-db and attacker-db

- take all connection strings from cfg file

- Integrate attacker-db logic in Glastopf request handler
    write SQLinjectableEmulator

- open db connections in beginning

- setup data.db, attacker.db if not present yet

_________________________________________________________________

TESTING DOs
-----------


TESTING DONEs
-------------

_________________________________________________________________