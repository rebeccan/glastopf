IMPLEMENTATION TODOs
--------------------

- improve classification in requests.xml
    problem: SQLinjectableEmulator is only ran, when classified as sqlinjectable
    -> looks weired when an attacker tries to login normally
    "/comments", "?login=bla&password=bla

- add intelligent identification columns to attacker database

- close connections in the end (e.g. attackerdb_session)

- let copy-data-dbs only run in a sandbox (Dionaea?)

- use comments table instead of comments.txt 

- make input fields of GUI injectable
    (seems to be a longer task, as the body seems to be ingored completely)

- configuration: user can choose emulators sqli and sqlintectable

- relation attacker to ip_profile, inurl, etc...

- cleaning databases cron job:
    - add timestamp of latest_activity to attacker
    - delete all dataxx.db for attackers whose latest_activity is longer than one week
    
- sqlalchemy sessions and concurrency?


IMPLEMENTATION IN PROGRESS
--------------------------

- map user injected values to useful queries to comments and users tables

- write test for SQLinjectableEmulator

- Fix:
        python -m unittest discover -s testing -p 'test_emulators.py'
        -->
        from __init__ import __version__
        ImportError: No module named __init__




IMPLEMENTATION DONEs
--------------------

- add sqlite datasbase: attacker.db
    Mapping Attacker class to attacker table
    
- add sqlite database: data.db
    Mapping User class to user table
    
- add unique data databasename to each Attacker

- reuse mechanism of copy-data-db, accordingly to attacker

- 1 to 1 relation of copy-data-db and attacker-db

- take all connection strings from cfg file

- Integrate attacker-db logic in Glastopf request handler
    write SQLinjectableEmulator

- open db connections in beginning

- setup data.db, attacker.db if not present yet

_________________________________________________________________

TESTING DOs
-----------


TESTING DONEs
-------------

_________________________________________________________________